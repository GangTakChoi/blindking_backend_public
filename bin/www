#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("blindking-api:server");
const http = require("http");
const https = require("https");
var webSocket = require("../web-socket");
const fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

const HTTP_PORT = normalizePort(process.env.PORT || "3000");
const HTTPS_PORT = 3443;
app.set("port", HTTP_PORT);

/**
 * Set https options
 */

// const httpsOptions = {
//   key: fs.readFileSync("./bin/ssl_key/rootca.key"),
//   cert: fs.readFileSync("./bin/ssl_key/rootca.crt"),
// };

const httpsOptions = {
  key: fs.readFileSync(
    "./bin/certification/blindking-api.choikt.com_20230831B3BCF.key.pem"
  ),
  cert: fs.readFileSync(
    "./bin/certification/blindking-api.choikt.com_20230831B3BCF.crt.pem"
  ),
  ca: fs.readFileSync("./bin/certification/ca-chain-bundle.pem"),
};

/**
 * Create HTTP/HTTPS server.
 * Listen on provided port, on all network interfaces.
 */

const server = http
  .createServer(app)
  .listen(HTTP_PORT)
  .on("error", onError)
  .on("listening", onListening);
const httpsServer = https
  .createServer(httpsOptions, app)
  .listen(HTTPS_PORT)
  .on("error", onError)
  .on("listening", onListeningForHttps);

/**
 * Create Web Socket
 */

webSocket.createSocket(server);
webSocket.createSocket(httpsServer);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind =
    typeof HTTP_PORT === "string" ? "Pipe " + HTTP_PORT : "Port " + HTTP_PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListeningForHttps() {
  var addr = httpsServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
